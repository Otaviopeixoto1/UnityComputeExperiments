#pragma kernel PrefixSum 
#pragma kernel SumBlocks
#pragma kernel AddSums 

#define THREAD_GROUP_SIZE 512

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Due to the limited amount of threads per block, we have to split the input array into blocks. 
//For the algorithm to work, we must calculate the offsets betweem blocks and applay them in a different pass
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


uint sd; //Rework the block sum part
uint max; //maximum element inside the array
uint blockCount;

//StructuredBuffer<uint> offsetBufferIn; // Initial input array that will be scaned. Size MUST BE MULTIPLE THREAD_GROUP_SIZE * 2
//RWStructuredBuffer<uint> offsetBufferOut; // Final scaned array given as output. Size MUST BE MULTIPLE THREAD_GROUP_SIZE * 2
RWStructuredBuffer<uint> offsetBuffer;

StructuredBuffer<uint> sumsBufferIn;
RWStructuredBuffer<uint> sumsBufferOut;


// Prefix sum scan based on: https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda


// WE ASSUME THAT THE INPUT ARRAY WILL HAVE A SIZE THAT IS A MULTIPLE OF 2 * THREAD_GROUP_SIZE 
// EVEN IF THIS RANGE IS NOT TOTALLY USED. THIS AVOIDS TOO MANY CONDITIONAL STATEMENTS ON SHADER
groupshared int temp[2 * THREAD_GROUP_SIZE];
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void PrefixSum(uint globalID : SV_DispatchThreadID, uint localID : SV_GROUPTHREADID, uint groupID : SV_GROUPID) 
{
    int offset = 1; 

    temp[2*localID] = offsetBuffer[2*globalID]; // load input into shared memory 
    temp[2*localID+1] = offsetBuffer[2*globalID+1]; 

    [unroll]
    for (uint d = THREAD_GROUP_SIZE; d > 0; d >>= 1) // Upsweep                   
    {
        GroupMemoryBarrierWithGroupSync();
        if (localID < d)   
        { 
            int ai = offset*(2*localID+1)-1;     
            int bi = offset*(2*localID+2)-1; 
            temp[bi] += temp[ai];    
        }   
        offset *= 2;
    }  

    if (localID == 0) 
    { 
        //the last element contains the sum of all elements in the temp array
        sumsBufferOut[groupID] = temp[2 * THREAD_GROUP_SIZE  - 1];
        // clear the last element 
        temp[2 * THREAD_GROUP_SIZE  - 1] = 0; 
    }  
    
    [unroll]
    for (uint d = 1; d < THREAD_GROUP_SIZE * 2; d *= 2) // Downsweep 
    {      
        offset >>= 1;      
        GroupMemoryBarrierWithGroupSync();     
        if (localID < d)      
        { 
            int ai = offset*(2*localID+1)-1;     
            int bi = offset*(2*localID+2)-1; 
            float t = temp[ai]; 
            temp[ai] = temp[bi]; 
            temp[bi] += t;       
        } 
    }  
    GroupMemoryBarrierWithGroupSync(); 

    //Write results to device memory

    offsetBuffer[2*globalID] = temp[2*localID + 1];  
    
    if(localID < THREAD_GROUP_SIZE - 1)
    {
        offsetBuffer[2*globalID+1] = temp[2*localID + 2]; 
    }
    else
    {
        offsetBuffer[2*globalID+1] = sumsBufferOut[groupID];
    }

    
}


//Calculate the total offsets between blocks of the array
// NEVER ALLOW THE NUMBER OF ARRAY BLOCKS TO SURPASS THE MAX THREAD COUNT ! (actually just limit it to 512)
// OTHERWISE WE WOULD HAVE TO SEPARATE BLOCKS INSIDE OTHER BLOCKS

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SumBlocks(uint3 id : SV_DISPATCHTHREADID) 
{
    //id.x = array block global id
    if (id.x >= blockCount) {return;}

    uint k = id.x;

    if (k < sd) 
    {
        sumsBufferOut[k] = sumsBufferIn[k];
    } 
    else 
    {
        sumsBufferOut[k] = sumsBufferIn[k] + sumsBufferIn[k - sd];
    }
}

//Apply the final block offsets into the global offset array
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void AddSums(uint globalID : SV_DISPATCHTHREADID, uint groupID : SV_GROUPID) 
{
    //if (groupID == 0) {return;}

    offsetBuffer[2*(globalID + THREAD_GROUP_SIZE)] += sumsBufferIn[groupID];
    offsetBuffer[2*(globalID + THREAD_GROUP_SIZE)+1] += sumsBufferIn[groupID];
}