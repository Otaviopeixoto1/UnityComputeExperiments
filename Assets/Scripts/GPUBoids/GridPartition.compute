#pragma kernel ClearOffsets
#pragma kernel UpdateGrid
#pragma kernel RearrangeBoids 

#define blockSize 512

#include "Assets/Shaders/Boids/boidInclude.hlsl"


uint boidCount;
uint totalGridCells;

float gridCellSize;
uint gridDimX;
uint gridDimY;
uint gridDimZ;


// gridBuffer will contain the grid cell index and the local offset into the final buffer (boidsOut) for each boid
RWStructuredBuffer<uint2> gridBuffer;

// Initially, offsetBuffer will contain a map of each grid cell to the total count of boids in that cell
// After using prefix scan, this will contain the global offset into the final buffer (boidsOut) for all boids in that cell
RWStructuredBuffer<uint> offsetBuffer; 





uint getGridID(BoidData boid) 
{
    int boidX = floor(boid.position.x / gridCellSize + gridDimX / 2);
    int boidY = floor(boid.position.y / gridCellSize + gridDimY / 2);
    int boidZ = floor(boid.position.z / gridCellSize + gridDimZ / 2);
    return (gridDimY * gridDimX * boidZ) + (gridDimX * boidY) + boidX;
}

[numthreads(blockSize, 1, 1)]
void ClearOffsets(uint3 id : SV_DispatchThreadID) 
{
    //id.x = grid cell global index
    if (id.x >= totalGridCells) {return;}

    offsetBuffer[id.x] = 0;
}


[numthreads(blockSize, 1, 1)]
void UpdateGrid(uint3 id : SV_DispatchThreadID) 
{
    //id.x = boid index
    if (id.x >= boidCount) {return;}

    int gridID = getGridID(boidsIn[id.x]);

    //gridBuffer: x -> cell index  y -> offset of the boid inside the grid cell
    gridBuffer[id.x].x = gridID;
    InterlockedAdd(offsetBuffer[gridID], 1, gridBuffer[id.x].y);
}


[numthreads(blockSize, 1, 1)]
void RearrangeBoids(uint3 id : SV_DispatchThreadID) 
{
    //id.x = boid index
    if (id.x >= boidCount) {return;}
    
    uint gridID = gridBuffer[id.x].x;
    uint cellOffset = gridBuffer[id.x].y;
    uint index = offsetBuffer[gridID] - 1 - cellOffset;
    boidsOut[index] = boidsIn[id.x];
}
